{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\maafa\\\\Desktop\\\\UCRX\\\\projects\\\\travelRush2\\\\travelrush2\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\maafa\\\\Desktop\\\\UCRX\\\\projects\\\\travelRush2\\\\travelrush2\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\maafa\\\\Desktop\\\\UCRX\\\\projects\\\\travelRush2\\\\travelrush2\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\maafa\\\\Desktop\\\\UCRX\\\\projects\\\\travelRush2\\\\travelrush2\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\maafa\\\\Desktop\\\\UCRX\\\\projects\\\\travelRush2\\\\travelrush2\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\maafa\\\\Desktop\\\\UCRX\\\\projects\\\\travelRush2\\\\travelrush2\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\maafa\\\\Desktop\\\\UCRX\\\\projects\\\\travelRush2\\\\travelrush2\\\\client\\\\src\\\\components\\\\SearchForm\\\\index.js\";\nimport React, { Component } from \"react\";\nimport { InputFlight, InputDrive, InputDate, FormBtn } from \"../Form\";\nimport DropDown from \"../DropDown\";\nimport { airportFinderSearch, googleSearch } from \"../../utils/API.js\";\nimport InputAutoFlight from \"../InputAutoFlight\";\nimport AutocompleteFlight from \"../AutocompleteFlight\"; //import ImageCard, { Button } from \"./components/Button\";\n//import NavBar, { DropDown } from \"./components/DropDown\";\n//import Form from \"./components/Form\";\n//import images from \"./images.json\";\n//import \"./App.css\";\n\nvar SearchForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchForm, _Component);\n\n  function SearchForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SearchForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SearchForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      airport: \"\",\n      address: \"\",\n      date: \"\",\n      coordLoc: {\n        long: 0,\n        lat: 0\n      },\n      airportList: []\n    };\n\n    _this.handleOnClick = function (event) {\n      //prevent default behavior\n      event.preventDefault(); //**MAKE SURE THAT THE SUBMIT BUTTON DOESN'T EXECUTE UNLESS THE USER HAS SUPPLIED THE REQUIRED INPUTS! **/\n      //Now do the necessary API calls....\n      //Remember that the state has the necessary inputs/search parameters.\n      //console.log(this.state);\n      //API calls\n      //return this.state;\n\n      console.log(\"Travel mode is \" + _this.props.travelMode);\n\n      if (_this.props.travelMode === \"1\") {\n        //airport\n        _this.getCoordinates(\"airport\", function () {\n          //call back function not executing!!!\n          console.log(\"React has updated the coordinates!\");\n          console.log(\"Testing handleClick\", _this.state); //this.state isn't logging on the console???\n          //send user input to call back in drop down\n\n          _this.props.dropcb(_this.state);\n        });\n      } else if (_this.props.travelMode === \"2\") {\n        //address\n        _this.getCoordinates(\"address\", function () {\n          //call back function not executing!!!\n          console.log(\"React has updated the coordinates!\");\n          console.log(_this.state); //this.state isn't logging on the console???\n\n          _this.props.dropcb(_this.state);\n        });\n      }\n    };\n\n    _this.handleOnBlur = function (event) {\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n      console.log(\"I am inside blur event\");\n      console.log(name);\n      console.log(value);\n\n      _this.setState(_defineProperty({}, name, value)); //.catch(err => console.log(\"error\"));\n\n    };\n\n    _this.handleOnChange = function (event) {\n      console.log(\"I am inside change event\");\n      console.log(event.target.name);\n      console.log(event.target.value);\n    };\n\n    _this.handleDateChange = function (event) {\n      //console.log(\"I am inside the date event\");\n      var _event$target2 = event.target,\n          name = _event$target2.name,\n          value = _event$target2.value;\n\n      _this.setState(_defineProperty({}, name, value), function () {\n        console.log(event.target.value);\n      });\n    };\n\n    _this.getCoordinates = function (transportMode, cb) {\n      //Use geocoding API to get address\n      // let indexOfComma = this.state.address.indexOf(\",\");\n      // let queryCity = this.state.address.substring(0, indexOfComma);\n      // queryCity = queryCity.replace(\" \", \"+\");\n      // let queryState = this.state.address.substring(indexOfComma + 2);\n      // queryState = queryState.replace(\" \", \"+\");\n      var formattedAddress;\n\n      if (transportMode === \"airport\") {\n        formattedAddress = _this.state.airport.replace(\" \", \"+\");\n      } else {\n        formattedAddress = _this.state.address.replace(\" \", \"+\");\n      }\n\n      googleSearch(formattedAddress).then(function (response) {\n        console.log(response);\n        var coordLat = response.data.results[0].geometry.location.lat;\n        var coordLong = response.data.results[0].geometry.location.lng; //console.log(response.data.results);\n\n        _this.setState({\n          coordLoc: {\n            long: coordLong,\n            lat: coordLat\n          }\n        }, function () {\n          console.log(_this.state.coordLoc);\n\n          _this.props.dropcb(_this.state);\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      }); //1043 Santo Antonio drive, Colton, CA 92324\n    };\n\n    _this.callbackFunction = function (autocompleteInput) {\n      _this.setState({\n        airport: autocompleteInput\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SearchForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var datePicker = document.getElementById(\"date\");\n      console.log(datePicker); //handle change for the date\n\n      datePicker.addEventListener(\"change\", function () {\n        _this2.setState({\n          date: datePicker.value\n        });\n\n        console.log(_this2.state.date);\n      }); // const autocompleteFly = document.getElementById(\"airport\");\n      // console.log(autoCompleteFly);\n      //handle change for the flight\n    }\n  }, {\n    key: \"render\",\n\n    /*\n    handleDropClick = event => {\n      //prevent default behavior\n      event.preventDefault();\n      if (this.event.target.getAttribute(data - value) === \"1\") {\n        //If user chose to fly, then hide `Form` for the destination address\n        this.optionDrive.style.display = \"none\";\n      } else if (this.event.target.getAttribute(data - value) === \"2\") {\n        //If user chose to drive, then hide `Form` for the airport address\n        this.optionFly.style.display = \"none\";\n      }\n    };*/\n    //How does button component know to submit my two forms?\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"col s12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, this.props.travelMode === \"1\" ? React.createElement(\"div\", {\n        className: \"col s6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(AutocompleteFlight, {\n        searchFormcb: this.callbackFunction,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      })) : React.createElement(InputDrive, {\n        address: this.state.address,\n        onBlur: this.handleOnBlur,\n        name: \"address\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }), React.createElement(InputDate, {\n        date: this.state.date,\n        value: this.state.date,\n        onChange: this.handleDateChange,\n        name: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col offset-s6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(FormBtn, {\n        onClick: this.handleOnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return SearchForm;\n}(Component);\n\nexport default SearchForm;\n/* render() {\n    return (\n      <div>\n        {this.props.data - choice === \"1\" ? (\n          <form className=\"col s12\">\n            <div className=\"row\">\n              <div className=\"input-field col s12\">\n                <textarea\n                  id=\"address-dest\"\n                  className=\"materialize-textarea\"\n                  onChange={handleOnchange}\n                ></textarea>\n                <label for=\"address-dest\">{this.state.airportAddress}</label>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"input-field col s12\">\n                <textarea\n                  id=\"date-dest\"\n                  className=\"materialize-textarea\"\n                  onChange={handleOnchange}\n                ></textarea>\n                <label for=\"date-dest\">{this.state.date}</label>\n              </div>\n            </div>\n            <button\n              className=\"btn waves-effect waves-light\"\n              type=\"submit\"\n              name=\"action\"\n              onClick={handleOnClick}\n            >\n              Submit\n              <i class=\"material-icons right\">flight_takeoff</i>\n            </button>\n          </form>\n        ) : (\n          <form className=\"col s12\">\n            <div className=\"row\">\n              <div className=\"input-field col s12\">\n                <textarea\n                  id=\"address-dest\"\n                  className=\"materialize-textarea\"\n                  onChange={handleOnchange}\n                ></textarea>\n                <label for=\"address-dest\">{this.state.address}</label>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"input-field col s12\">\n                <textarea\n                  id=\"date-dest\"\n                  className=\"materialize-textarea\"\n                  onChange={handleOnchange}\n                ></textarea>\n                <label for=\"date-dest\">{this.state.date}</label>\n              </div>\n            </div>\n            <button\n              className=\"btn waves-effect waves-light\"\n              type=\"submit\"\n              name=\"action\"\n              onClick={handleOnClick}\n            >\n              Submit\n              <i class=\"material-icons right\">flight_takeoff</i>\n            </button>\n          </form>\n        )}\n      </div>\n    );\n  }*/","map":{"version":3,"sources":["C:\\Users\\maafa\\Desktop\\UCRX\\projects\\travelRush2\\travelrush2\\client\\src\\components\\SearchForm\\index.js"],"names":["React","Component","InputFlight","InputDrive","InputDate","FormBtn","DropDown","airportFinderSearch","googleSearch","InputAutoFlight","AutocompleteFlight","SearchForm","state","airport","address","date","coordLoc","long","lat","airportList","handleOnClick","event","preventDefault","console","log","props","travelMode","getCoordinates","dropcb","handleOnBlur","target","name","value","setState","handleOnChange","handleDateChange","transportMode","cb","formattedAddress","replace","then","response","coordLat","data","results","geometry","location","coordLong","lng","catch","err","callbackFunction","autocompleteInput","datePicker","document","getElementById","addEventListener"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { InputFlight, InputDrive, InputDate, FormBtn } from \"../Form\";\nimport DropDown from \"../DropDown\";\nimport { airportFinderSearch, googleSearch } from \"../../utils/API.js\";\nimport InputAutoFlight from \"../InputAutoFlight\";\nimport AutocompleteFlight from \"../AutocompleteFlight\";\n\n//import ImageCard, { Button } from \"./components/Button\";\n//import NavBar, { DropDown } from \"./components/DropDown\";\n//import Form from \"./components/Form\";\n//import images from \"./images.json\";\n//import \"./App.css\";\n\nclass SearchForm extends Component {\n  state = {\n    airport: \"\",\n    address: \"\",\n    date: \"\",\n    coordLoc: { long: 0, lat: 0 },\n    airportList: []\n  };\n\n  componentDidMount() {\n    const datePicker = document.getElementById(\"date\");\n    console.log(datePicker);\n    //handle change for the date\n    datePicker.addEventListener(\"change\", () => {\n      this.setState({ date: datePicker.value });\n      console.log(this.state.date);\n    });\n    // const autocompleteFly = document.getElementById(\"airport\");\n    // console.log(autoCompleteFly);\n    //handle change for the flight\n  }\n\n  handleOnClick = event => {\n    //prevent default behavior\n    event.preventDefault();\n    //**MAKE SURE THAT THE SUBMIT BUTTON DOESN'T EXECUTE UNLESS THE USER HAS SUPPLIED THE REQUIRED INPUTS! **/\n    //Now do the necessary API calls....\n    //Remember that the state has the necessary inputs/search parameters.\n    //console.log(this.state);\n    //API calls\n    //return this.state;\n    console.log(\"Travel mode is \" + this.props.travelMode);\n    if (this.props.travelMode === \"1\") {\n      //airport\n      this.getCoordinates(\"airport\", () => {\n        //call back function not executing!!!\n        console.log(\"React has updated the coordinates!\");\n        console.log(\"Testing handleClick\", this.state); //this.state isn't logging on the console???\n        //send user input to call back in drop down\n        this.props.dropcb(this.state);\n      });\n    } else if (this.props.travelMode === \"2\") {\n      //address\n      this.getCoordinates(\"address\", () => {\n        //call back function not executing!!!\n        console.log(\"React has updated the coordinates!\");\n        console.log(this.state); //this.state isn't logging on the console???\n        this.props.dropcb(this.state);\n      });\n    }\n  };\n  //handles address input by extracting and updating its coordinates\n  handleOnBlur = event => {\n    const {\n      target: { name, value }\n    } = event;\n    console.log(\"I am inside blur event\");\n    console.log(name);\n    console.log(value);\n    this.setState({ [name]: value });\n    //.catch(err => console.log(\"error\"));\n  };\n\n  // handleOnSelect = event => {\n  //   const {\n  //     target: { name, value }\n  //   } = event;\n  //console.log(name);\n\n  // console.log(\"I am inside the select event\");\n  // console.log(event.target);\n  //console.log(name);\n  //console.log(value);\n  //this.setState({ [name]: value });\n  //console.log(event.target.textContent);\n  //.catch(err => console.log(\"error\"));\n  // };\n  handleOnChange = event => {\n    console.log(\"I am inside change event\");\n    console.log(event.target.name);\n    console.log(event.target.value);\n  };\n\n  //Handles the date input\n  handleDateChange = event => {\n    //console.log(\"I am inside the date event\");\n    const {\n      target: { name, value }\n    } = event;\n    this.setState({ [name]: value }, () => {\n      console.log(event.target.value);\n    });\n  };\n\n  // getAirport = airport => {\n  //   //Use Airport finder API to get list of airports\n  //   airportFinderSearch(this.state.coordLoc.long, this.state.coordLoc.lat)\n  //     .then()\n  //     .catch(err => console.log(err));\n  // };\n\n  //Helper function to get the coordinates for an address or airport.\n  getCoordinates = (transportMode, cb) => {\n    //Use geocoding API to get address\n    // let indexOfComma = this.state.address.indexOf(\",\");\n    // let queryCity = this.state.address.substring(0, indexOfComma);\n    // queryCity = queryCity.replace(\" \", \"+\");\n    // let queryState = this.state.address.substring(indexOfComma + 2);\n    // queryState = queryState.replace(\" \", \"+\");\n    let formattedAddress;\n    if (transportMode === \"airport\") {\n      formattedAddress = this.state.airport.replace(\" \", \"+\");\n    } else {\n      formattedAddress = this.state.address.replace(\" \", \"+\");\n    }\n\n    googleSearch(formattedAddress)\n      .then(response => {\n        console.log(response);\n        let coordLat = response.data.results[0].geometry.location.lat;\n        let coordLong = response.data.results[0].geometry.location.lng;\n        //console.log(response.data.results);\n        this.setState({ coordLoc: { long: coordLong, lat: coordLat } }, () => {\n          console.log(this.state.coordLoc);\n          this.props.dropcb(this.state);\n        });\n      })\n      .catch(err => console.log(err));\n\n    //1043 Santo Antonio drive, Colton, CA 92324\n  };\n\n  //Call back function passes airport input from the Autocomplete component(child to parent data flow).\n  callbackFunction = autocompleteInput => {\n    this.setState({ airport: autocompleteInput });\n  };\n\n  /*\n  handleDropClick = event => {\n    //prevent default behavior\n    event.preventDefault();\n    if (this.event.target.getAttribute(data - value) === \"1\") {\n      //If user chose to fly, then hide `Form` for the destination address\n      this.optionDrive.style.display = \"none\";\n    } else if (this.event.target.getAttribute(data - value) === \"2\") {\n      //If user chose to drive, then hide `Form` for the airport address\n      this.optionFly.style.display = \"none\";\n    }\n  };*/\n  //How does button component know to submit my two forms?\n  render() {\n    return (\n      <div>\n        <form className=\"col s12\">\n          <div className=\"row\">\n            {this.props.travelMode === \"1\" ? (\n              <div className=\"col s6\">\n                <AutocompleteFlight\n                  searchFormcb={this.callbackFunction}\n                ></AutocompleteFlight>\n              </div>\n            ) : (\n              <InputDrive\n                address={this.state.address}\n                onBlur={this.handleOnBlur}\n                name=\"address\"\n              ></InputDrive>\n            )}\n            <InputDate\n              date={this.state.date}\n              value={this.state.date}\n              onChange={this.handleDateChange}\n              name=\"date\"\n            ></InputDate>\n          </div>\n          <div className=\"row\">\n            <div className=\"col offset-s6\">\n              <FormBtn onClick={this.handleOnClick}></FormBtn>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchForm;\n\n/* render() {\n    return (\n      <div>\n        {this.props.data - choice === \"1\" ? (\n          <form className=\"col s12\">\n            <div className=\"row\">\n              <div className=\"input-field col s12\">\n                <textarea\n                  id=\"address-dest\"\n                  className=\"materialize-textarea\"\n                  onChange={handleOnchange}\n                ></textarea>\n                <label for=\"address-dest\">{this.state.airportAddress}</label>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"input-field col s12\">\n                <textarea\n                  id=\"date-dest\"\n                  className=\"materialize-textarea\"\n                  onChange={handleOnchange}\n                ></textarea>\n                <label for=\"date-dest\">{this.state.date}</label>\n              </div>\n            </div>\n            <button\n              className=\"btn waves-effect waves-light\"\n              type=\"submit\"\n              name=\"action\"\n              onClick={handleOnClick}\n            >\n              Submit\n              <i class=\"material-icons right\">flight_takeoff</i>\n            </button>\n          </form>\n        ) : (\n          <form className=\"col s12\">\n            <div className=\"row\">\n              <div className=\"input-field col s12\">\n                <textarea\n                  id=\"address-dest\"\n                  className=\"materialize-textarea\"\n                  onChange={handleOnchange}\n                ></textarea>\n                <label for=\"address-dest\">{this.state.address}</label>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"input-field col s12\">\n                <textarea\n                  id=\"date-dest\"\n                  className=\"materialize-textarea\"\n                  onChange={handleOnchange}\n                ></textarea>\n                <label for=\"date-dest\">{this.state.date}</label>\n              </div>\n            </div>\n            <button\n              className=\"btn waves-effect waves-light\"\n              type=\"submit\"\n              name=\"action\"\n              onClick={handleOnClick}\n            >\n              Submit\n              <i class=\"material-icons right\">flight_takeoff</i>\n            </button>\n          </form>\n        )}\n      </div>\n    );\n  }*/\n"]},"metadata":{},"sourceType":"module"}