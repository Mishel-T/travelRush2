{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\maafa\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\maafa\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\maafa\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\maafa\\\\Desktop\\\\UCRX\\\\projects\\\\travelRush2\\\\travelrush2\\\\client\\\\src\\\\components\\\\AutocompleteFlight\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport deburr from \"lodash/deburr\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Popper from \"@material-ui/core/Popper\";\nimport { makeStyles } from \"@material-ui/core/styles\"; //import Icon from \"@material-ui/core/Icon\";\n\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FlightLand from \"@material-ui/icons/FlightLand\";\nimport { airportsList, airportFinderSearch, googleSearch } from \"../../utils/API.js\"; //flight_land\n//use API to set suggestions to airport names\n// const suggestions = [];\n// console.log(\"I am in Autosuggest!!!\");\n// airportsList()\n//   .then(res => {\n//     console.log(res);\n//     for (let i = 0; i < airportsList().length; i++) {\n//       suggestions.push({\n//         label:\n//           airportsList.city +\n//           \", \" +\n//           airportsList.stateCode +\n//           \"(\" +\n//           airportsList.code +\n//           \" - \" +\n//           airportsList.name +\n//           \")\"\n//       });\n//     }\n//   })\n//   .catch(err => console.log(JSON.parse(JSON.stringify(err))));\n//console.log(suggestions);\n// const suggestions = [\n//   { label: \"Afghanistan\" },\n//   { label: \"Aland Islands\" },\n//   { label: \"Albania\" },\n//   { label: \"Algeria\" },\n//   { label: \"American Samoa\" },\n//   { label: \"Andorra\" },\n//   { label: \"Angola\" },\n//   { label: \"Anguilla\" },\n//   { label: \"Antarctica\" },\n//   { label: \"Antigua and Barbuda\" },\n//   { label: \"Argentina\" },\n//   { label: \"Armenia\" },\n//   { label: \"Aruba\" },\n//   { label: \"Australia\" },\n//   { label: \"Austria\" },\n//   { label: \"Azerbaijan\" },\n//   { label: \"Bahamas\" },\n//   { label: \"Bahrain\" },\n//   { label: \"Bangladesh\" },\n//   { label: \"Barbados\" },\n//   { label: \"Belarus\" },\n//   { label: \"Belgium\" },\n//   { label: \"Belize\" },\n//   { label: \"Benin\" },\n//   { label: \"Bermuda\" },\n//   { label: \"Bhutan\" },\n//   { label: \"Bolivia, Plurinational State of\" },\n//   { label: \"Bonaire, Sint Eustatius and Saba\" },\n//   { label: \"Bosnia and Herzegovina\" },\n//   { label: \"Botswana\" },\n//   { label: \"Bouvet Island\" },\n//   { label: \"Brazil\" },\n//   { label: \"British Indian Ocean Territory\" },\n//   { label: \"Brunei Darussalam\" }\n// ];\n// const suggestions = [\n//   { label: \"Los Angeles, CA, (LAX - Los Angeles Intl)\" },\n//   { label: \"Houston, TX, (IAH - George Bush Intercontinental/Houston)\" },\n//   { label: \"Ontario, CA, (ONT - Ontario Intl)\" },\n//   { label: \"Houston, TX, (HOU - William P Hobby)\" },\n//   { label: \"Santa Ana, CA, (SNA - John Wayne Airport- Orange County)\" },\n//   { label: \"Phoenix, AZ, (PHX- Phoenix Sky Harbor Intl)\" },\n//   { label: \"Miami, FL, (MIA - Miami Intl)\" },\n//   { label: \"Atlanta, GA, (ATL - Hartsfield-Jackson Atlanta Intl)\" },\n//   { label: \"Chicago, IL, (ORD - Chicago O'Hare Intl)\" },\n//   { label: \"New York, NY, (JFK - John F Kennedy Intl)\" },\n//   { label: \"New York, NY, (LGA - Laguardia Intl)\" },\n//   { label: \"Philadelphia, PA, (PHL - Philadelphia Intl)\" },\n//   { label: \"Salt Lake City, UT, (SLC - Salt Lake City Intl)\" },\n//   { label: \"Seattle, WA, (SEA - Seattle-Tacoma Intl)\" },\n//   { label: \"Newark, NJ, (EWR - Newark Liberty Intl)\" },\n//   { label: \"Dallas-Fort Worth, TX, (DFW - Dallas-Fort Worth Intl)\" },\n//   { label: \"Denver, CO, (DEN - Denver Intl)\" },\n//   { label: \"San Francisco, CA, (SFO - San Francisco Intl)\" },\n//   { label: \"Las Vegas, NV, (LAS - McCarran Intl)\" },\n//   { label: \"Orlando, FL, (MCO - Orlando Intl)\" },\n//   { label: \"Belarus\" },\n//   { label: \"Belgium\" },\n//   { label: \"Belize\" },\n//   { label: \"Benin\" },\n//   { label: \"Bermuda\" },\n//   { label: \"Bhutan\" },\n//   { label: \"Bolivia, Plurinational State of\" },\n//   { label: \"Bonaire, Sint Eustatius and Saba\" },\n//   { label: \"Bosnia and Herzegovina\" },\n//   { label: \"Botswana\" },\n//   { label: \"Bouvet Island\" },\n//   { label: \"Brazil\" },\n//   { label: \"British Indian Ocean Territory\" },\n//   { label: \"Brunei Darussalam\" }\n// ];\n\nvar suggestions = [{\n  label: \"Los Angeles, CA, (LAX Los Angeles Intl)\",\n  keyInd: \"1\"\n}, {\n  label: \"Houston, TX, (IAH George Bush Intercontinental/Houston)\",\n  keyInd: \"2\"\n}, {\n  label: \"Ontario, CA, (ONT Ontario Intl)\",\n  keyInd: \"3\"\n}, {\n  label: \"Houston, TX, (HOU William P Hobby)\",\n  keyInd: \"4\"\n}, {\n  label: \"Santa Ana, CA, (SNA John Wayne Airport Orange County)\",\n  keyInd: \"5\"\n}, {\n  label: \"Phoenix, AZ, (PH Phoenix Sky Harbor Intl)\",\n  keyInd: \"6\"\n}, {\n  label: \"Miami, FL, (MIA Miami Intl)\",\n  keyInd: \"7\"\n}, {\n  label: \"Atlanta, GA, (ATL Hartsfield Jackson Atlanta Intl)\",\n  keyInd: \"8\"\n}, {\n  label: \"Chicago, IL, (ORD Chicago O'Hare Intl)\",\n  keyInd: \"9\"\n}, {\n  label: \"New York, NY, (JFK John F Kennedy Intl)\",\n  keyInd: \"10\"\n}, {\n  label: \"New York, NY, (LGA Laguardia Intl)\",\n  keyInd: \"11\"\n}, {\n  label: \"Philadelphia, PA, (PHL Philadelphia Intl)\",\n  keyInd: \"12\"\n}, {\n  label: \"Salt Lake City, UT, (SLC Salt Lake City Intl)\",\n  keyInd: \"13\"\n}, {\n  label: \"Seattle, WA, (SEA Seattle Tacoma Intl)\",\n  keyInd: \"14\"\n}, {\n  label: \"Newark, NJ, (EWR Newark Liberty Intl)\",\n  keyInd: \"15\"\n}, {\n  label: \"Dallas Fort Worth, TX, (DFW Dallas Fort Worth Intl)\",\n  keyInd: \"16\"\n}, {\n  label: \"Denver, CO, (DEN Denver Intl)\",\n  keyInd: \"17\"\n}, {\n  label: \"San Francisco, CA, (SFO San Francisco Intl)\",\n  keyInd: \"18\"\n}, {\n  label: \"Las Vegas, NV, (LAS McCarran Intl)\",\n  keyInd: \"19\"\n}, {\n  label: \"Orlando, FL, (MCO Orlando Intl)\",\n  keyInd: \"20\"\n}];\nconsole.log(typeof suggestions);\n\nfunction renderInputComponent(inputProps) {\n  var classes = inputProps.classes,\n      _inputProps$inputRef = inputProps.inputRef,\n      _inputRef = _inputProps$inputRef === void 0 ? function () {} : _inputProps$inputRef,\n      ref = inputProps.ref,\n      other = _objectWithoutProperties(inputProps, [\"classes\", \"inputRef\", \"ref\"]);\n\n  return React.createElement(TextField, Object.assign({\n    fullWidth: true,\n    InputProps: {\n      disableUnderline: true,\n      startAdornment: React.createElement(InputAdornment, {\n        position: \"start\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(FlightLand, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      })),\n      inputRef: function inputRef(node) {\n        ref(node);\n\n        _inputRef(node);\n      },\n      classes: {\n        input: classes.input\n      }\n    }\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }));\n} // InputProps={{\n//   disableUnderline: true,\n//  }}\n\n/* DISPLAYS A SUGGESTION THAT MATCHES THE USER INPUT(QUERY), \nWITH THE MATCHED PORTION OF THE SUGGESTION HIGHLIGHTED. */\n\n\nfunction renderSuggestion(suggestion, _ref) {\n  var query = _ref.query,\n      isHighlighted = _ref.isHighlighted;\n  var matches = match(suggestion.label, query);\n  var parts = parse(suggestion.label, matches);\n  return React.createElement(MenuItem, {\n    selected: isHighlighted,\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, parts.map(function (part, index) {\n    return React.createElement(\"span\", {\n      key: index,\n      style: {\n        fontWeight: part.highlight ? 500 : 400\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, part.text);\n  })));\n} //GETS THE ARRAY OF SUGGESTIONS BASED ON USER INPUT(VALUE)\n\n\nfunction getSuggestions(value) {\n  var inputValue = deburr(value.trim()).toLowerCase();\n  var inputLength = inputValue.length;\n  var count = 0;\n  return inputLength === 0 ? [] : suggestions.filter(function (suggestion) {\n    var keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      // height: 250,\n      flexGrow: 1\n    },\n    container: {\n      position: \"relative\"\n    },\n    suggestionsContainerOpen: {\n      position: \"absolute\",\n      zIndex: 1,\n      marginTop: theme.spacing(1),\n      left: 0,\n      right: 0\n    },\n    suggestion: {\n      display: \"block\"\n    },\n    suggestionsList: {\n      margin: 0,\n      padding: 0,\n      listStyleType: \"none\"\n    },\n    divider: {\n      height: theme.spacing(2)\n    }\n  };\n});\nexport default function IntegrationAutosuggest(props) {\n  var classes = useStyles();\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      anchorEl = _React$useState2[0],\n      setAnchorEl = _React$useState2[1];\n\n  var _React$useState3 = React.useState({\n    single: \"\",\n    popper: \"\"\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      state = _React$useState4[0],\n      setState = _React$useState4[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      stateSuggestions = _React$useState6[0],\n      setSuggestions = _React$useState6[1];\n\n  var handleSuggestionsFetchRequested = function handleSuggestionsFetchRequested(_ref2) {\n    var value = _ref2.value;\n    setSuggestions(getSuggestions(value));\n  };\n\n  var handleSuggestionsClearRequested = function handleSuggestionsClearRequested() {\n    setSuggestions([]);\n  };\n\n  var handleChange = function handleChange(name) {\n    return function (event, _ref3) {\n      var newValue = _ref3.newValue;\n      console.log(newValue); //USER INPUT IS RIGHT HERE!!!! SEND THIS AS A PROP TO THE SEARCHFORM CONTAINER****\n\n      props.searchFormcb(newValue);\n      setState(_objectSpread({}, state, _defineProperty({}, name, newValue)));\n    };\n  };\n\n  var autosuggestProps = {\n    renderInputComponent: renderInputComponent,\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion\n  };\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290\n    },\n    __self: this\n  }, React.createElement(Autosuggest, Object.assign({}, autosuggestProps, {\n    inputProps: {\n      classes: classes,\n      id: \"react-autosuggest-simple\",\n      label: \"Country\",\n      placeholder: \"Search a country (start with a)\",\n      value: state.single,\n      onChange: handleChange(\"single\")\n    },\n    theme: {\n      container: classes.container,\n      suggestionsContainerOpen: classes.suggestionsContainerOpen,\n      suggestionsList: classes.suggestionsList,\n      suggestion: classes.suggestion\n    },\n    renderSuggestionsContainer: function renderSuggestionsContainer(options) {\n      return React.createElement(Paper, Object.assign({}, options.containerProps, {\n        square: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }), options.children);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: classes.divider,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["C:\\Users\\maafa\\Desktop\\UCRX\\projects\\travelRush2\\travelrush2\\client\\src\\components\\AutocompleteFlight\\index.js"],"names":["React","deburr","Autosuggest","match","parse","TextField","Paper","MenuItem","Popper","makeStyles","InputAdornment","FlightLand","airportsList","airportFinderSearch","googleSearch","suggestions","label","keyInd","console","log","renderInputComponent","inputProps","classes","inputRef","ref","other","disableUnderline","startAdornment","node","input","renderSuggestion","suggestion","query","isHighlighted","matches","parts","map","part","index","fontWeight","highlight","text","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","count","filter","keep","slice","getSuggestionValue","useStyles","theme","root","flexGrow","container","position","suggestionsContainerOpen","zIndex","marginTop","spacing","left","right","display","suggestionsList","margin","padding","listStyleType","divider","height","IntegrationAutosuggest","props","useState","anchorEl","setAnchorEl","single","popper","state","setState","stateSuggestions","setSuggestions","handleSuggestionsFetchRequested","handleSuggestionsClearRequested","handleChange","name","event","newValue","searchFormcb","autosuggestProps","onSuggestionsFetchRequested","onSuggestionsClearRequested","id","placeholder","onChange","options","containerProps","children"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport deburr from \"lodash/deburr\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Popper from \"@material-ui/core/Popper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n//import Icon from \"@material-ui/core/Icon\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FlightLand from \"@material-ui/icons/FlightLand\";\nimport {\n  airportsList,\n  airportFinderSearch,\n  googleSearch\n} from \"../../utils/API.js\";\n//flight_land\n\n//use API to set suggestions to airport names\n// const suggestions = [];\n\n// console.log(\"I am in Autosuggest!!!\");\n// airportsList()\n//   .then(res => {\n//     console.log(res);\n//     for (let i = 0; i < airportsList().length; i++) {\n//       suggestions.push({\n//         label:\n//           airportsList.city +\n//           \", \" +\n//           airportsList.stateCode +\n//           \"(\" +\n//           airportsList.code +\n//           \" - \" +\n//           airportsList.name +\n//           \")\"\n//       });\n//     }\n//   })\n//   .catch(err => console.log(JSON.parse(JSON.stringify(err))));\n\n//console.log(suggestions);\n// const suggestions = [\n//   { label: \"Afghanistan\" },\n//   { label: \"Aland Islands\" },\n//   { label: \"Albania\" },\n//   { label: \"Algeria\" },\n//   { label: \"American Samoa\" },\n//   { label: \"Andorra\" },\n//   { label: \"Angola\" },\n//   { label: \"Anguilla\" },\n//   { label: \"Antarctica\" },\n//   { label: \"Antigua and Barbuda\" },\n//   { label: \"Argentina\" },\n//   { label: \"Armenia\" },\n//   { label: \"Aruba\" },\n//   { label: \"Australia\" },\n//   { label: \"Austria\" },\n//   { label: \"Azerbaijan\" },\n//   { label: \"Bahamas\" },\n//   { label: \"Bahrain\" },\n//   { label: \"Bangladesh\" },\n//   { label: \"Barbados\" },\n//   { label: \"Belarus\" },\n//   { label: \"Belgium\" },\n//   { label: \"Belize\" },\n//   { label: \"Benin\" },\n//   { label: \"Bermuda\" },\n//   { label: \"Bhutan\" },\n//   { label: \"Bolivia, Plurinational State of\" },\n//   { label: \"Bonaire, Sint Eustatius and Saba\" },\n//   { label: \"Bosnia and Herzegovina\" },\n//   { label: \"Botswana\" },\n//   { label: \"Bouvet Island\" },\n//   { label: \"Brazil\" },\n//   { label: \"British Indian Ocean Territory\" },\n//   { label: \"Brunei Darussalam\" }\n// ];\n\n// const suggestions = [\n//   { label: \"Los Angeles, CA, (LAX - Los Angeles Intl)\" },\n//   { label: \"Houston, TX, (IAH - George Bush Intercontinental/Houston)\" },\n//   { label: \"Ontario, CA, (ONT - Ontario Intl)\" },\n//   { label: \"Houston, TX, (HOU - William P Hobby)\" },\n//   { label: \"Santa Ana, CA, (SNA - John Wayne Airport- Orange County)\" },\n//   { label: \"Phoenix, AZ, (PHX- Phoenix Sky Harbor Intl)\" },\n//   { label: \"Miami, FL, (MIA - Miami Intl)\" },\n//   { label: \"Atlanta, GA, (ATL - Hartsfield-Jackson Atlanta Intl)\" },\n//   { label: \"Chicago, IL, (ORD - Chicago O'Hare Intl)\" },\n//   { label: \"New York, NY, (JFK - John F Kennedy Intl)\" },\n//   { label: \"New York, NY, (LGA - Laguardia Intl)\" },\n//   { label: \"Philadelphia, PA, (PHL - Philadelphia Intl)\" },\n//   { label: \"Salt Lake City, UT, (SLC - Salt Lake City Intl)\" },\n//   { label: \"Seattle, WA, (SEA - Seattle-Tacoma Intl)\" },\n//   { label: \"Newark, NJ, (EWR - Newark Liberty Intl)\" },\n//   { label: \"Dallas-Fort Worth, TX, (DFW - Dallas-Fort Worth Intl)\" },\n//   { label: \"Denver, CO, (DEN - Denver Intl)\" },\n//   { label: \"San Francisco, CA, (SFO - San Francisco Intl)\" },\n//   { label: \"Las Vegas, NV, (LAS - McCarran Intl)\" },\n//   { label: \"Orlando, FL, (MCO - Orlando Intl)\" },\n//   { label: \"Belarus\" },\n//   { label: \"Belgium\" },\n//   { label: \"Belize\" },\n//   { label: \"Benin\" },\n//   { label: \"Bermuda\" },\n//   { label: \"Bhutan\" },\n//   { label: \"Bolivia, Plurinational State of\" },\n//   { label: \"Bonaire, Sint Eustatius and Saba\" },\n//   { label: \"Bosnia and Herzegovina\" },\n//   { label: \"Botswana\" },\n//   { label: \"Bouvet Island\" },\n//   { label: \"Brazil\" },\n//   { label: \"British Indian Ocean Territory\" },\n//   { label: \"Brunei Darussalam\" }\n// ];\n\nconst suggestions = [\n  { label: \"Los Angeles, CA, (LAX Los Angeles Intl)\", keyInd: \"1\" },\n  {\n    label: \"Houston, TX, (IAH George Bush Intercontinental/Houston)\",\n    keyInd: \"2\"\n  },\n  { label: \"Ontario, CA, (ONT Ontario Intl)\", keyInd: \"3\" },\n  { label: \"Houston, TX, (HOU William P Hobby)\", keyInd: \"4\" },\n  {\n    label: \"Santa Ana, CA, (SNA John Wayne Airport Orange County)\",\n    keyInd: \"5\"\n  },\n  { label: \"Phoenix, AZ, (PH Phoenix Sky Harbor Intl)\", keyInd: \"6\" },\n  { label: \"Miami, FL, (MIA Miami Intl)\", keyInd: \"7\" },\n  { label: \"Atlanta, GA, (ATL Hartsfield Jackson Atlanta Intl)\", keyInd: \"8\" },\n  { label: \"Chicago, IL, (ORD Chicago O'Hare Intl)\", keyInd: \"9\" },\n  { label: \"New York, NY, (JFK John F Kennedy Intl)\", keyInd: \"10\" },\n  { label: \"New York, NY, (LGA Laguardia Intl)\", keyInd: \"11\" },\n  { label: \"Philadelphia, PA, (PHL Philadelphia Intl)\", keyInd: \"12\" },\n  { label: \"Salt Lake City, UT, (SLC Salt Lake City Intl)\", keyInd: \"13\" },\n  { label: \"Seattle, WA, (SEA Seattle Tacoma Intl)\", keyInd: \"14\" },\n  { label: \"Newark, NJ, (EWR Newark Liberty Intl)\", keyInd: \"15\" },\n  {\n    label: \"Dallas Fort Worth, TX, (DFW Dallas Fort Worth Intl)\",\n    keyInd: \"16\"\n  },\n  { label: \"Denver, CO, (DEN Denver Intl)\", keyInd: \"17\" },\n  { label: \"San Francisco, CA, (SFO San Francisco Intl)\", keyInd: \"18\" },\n  { label: \"Las Vegas, NV, (LAS McCarran Intl)\", keyInd: \"19\" },\n  { label: \"Orlando, FL, (MCO Orlando Intl)\", keyInd: \"20\" }\n];\n\nconsole.log(typeof suggestions);\n\nfunction renderInputComponent(inputProps) {\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\n\n  return (\n    <TextField\n      fullWidth\n      InputProps={{\n        disableUnderline: true,\n        startAdornment: (\n          <InputAdornment position=\"start\">\n            <FlightLand />\n          </InputAdornment>\n        ),\n        inputRef: node => {\n          ref(node);\n          inputRef(node);\n        },\n        classes: {\n          input: classes.input\n        }\n      }}\n      {...other}\n    />\n  );\n}\n// InputProps={{\n//   disableUnderline: true,\n//  }}\n/* DISPLAYS A SUGGESTION THAT MATCHES THE USER INPUT(QUERY), \nWITH THE MATCHED PORTION OF THE SUGGESTION HIGHLIGHTED. */\n\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\n  const matches = match(suggestion.label, query);\n  const parts = parse(suggestion.label, matches);\n\n  return (\n    <MenuItem selected={isHighlighted} component=\"div\">\n      <div>\n        {parts.map((part, index) => (\n          <span key={index} style={{ fontWeight: part.highlight ? 500 : 400 }}>\n            {part.text}\n          </span>\n        ))}\n      </div>\n    </MenuItem>\n  );\n}\n//GETS THE ARRAY OF SUGGESTIONS BASED ON USER INPUT(VALUE)\nfunction getSuggestions(value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n\n  return inputLength === 0\n    ? []\n    : suggestions.filter(suggestion => {\n        const keep =\n          count < 5 &&\n          suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n        if (keep) {\n          count += 1;\n        }\n\n        return keep;\n      });\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    // height: 250,\n    flexGrow: 1\n  },\n  container: {\n    position: \"relative\"\n  },\n  suggestionsContainerOpen: {\n    position: \"absolute\",\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0\n  },\n  suggestion: {\n    display: \"block\"\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: \"none\"\n  },\n  divider: {\n    height: theme.spacing(2)\n  }\n}));\n\nexport default function IntegrationAutosuggest(props) {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [state, setState] = React.useState({\n    single: \"\",\n    popper: \"\"\n  });\n\n  const [stateSuggestions, setSuggestions] = React.useState([]);\n\n  const handleSuggestionsFetchRequested = ({ value }) => {\n    setSuggestions(getSuggestions(value));\n  };\n\n  const handleSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const handleChange = name => (event, { newValue }) => {\n    console.log(newValue); //USER INPUT IS RIGHT HERE!!!! SEND THIS AS A PROP TO THE SEARCHFORM CONTAINER****\n    props.searchFormcb(newValue);\n    setState({\n      ...state,\n      [name]: newValue\n    });\n  };\n\n  const autosuggestProps = {\n    renderInputComponent,\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n\n  return (\n    <div className={classes.root}>\n      <Autosuggest\n        {...autosuggestProps}\n        inputProps={{\n          classes,\n          id: \"react-autosuggest-simple\",\n          label: \"Country\",\n          placeholder: \"Search a country (start with a)\",\n          value: state.single,\n          onChange: handleChange(\"single\")\n        }}\n        theme={{\n          container: classes.container,\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\n          suggestionsList: classes.suggestionsList,\n          suggestion: classes.suggestion\n        }}\n        renderSuggestionsContainer={options => (\n          <Paper {...options.containerProps} square>\n            {options.children}\n          </Paper>\n        )}\n      />\n      <div className={classes.divider} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}